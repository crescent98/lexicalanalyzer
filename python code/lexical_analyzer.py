# -*- coding: utf-8 -*-
"""lexical analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJFkOCQ8mkPNXw6R3irsC1hH6Ma5BXpe

# ***Lexical Analyzer***

# *Token Scanner*

Signed Integer & Float-Point Number
"""
import sys
print(sys.argv)

#dictionary 형식으로 DFA 구현
T_SI=[{1: 1,2: 3, 3: 2,},
      {1: -1, 2: -1, 3: 4},
      {1:-1, 2: 5, 3: 6},
      {1: -1, 2: -1, 3: -1},
      {1: -1, 2: 5, 3: 6},
      {1: -1, 2: 5, 3: 6},
      {1: -1, 2: 5, 3: 6}]
      
#signed_integer scanner
def si_scanner(input):
  t_state=0
  for i in range(0,len(input)):
    char_temp=0
    if input[i]=='-':
      char_temp=1
    elif input[i]=='0':
      char_temp=2
    elif input[i].isdigit()==True:
      char_temp=3
    else:
      return -1
    t_state=T_SI[t_state][char_temp]
  if t_state==4 or t_state==3 or t_state==2 or t_state==6 or t_state==5:
    print("<INTEGER,",input,">")
  return t_state

#float point number
T_FP=[{1: 1, 2: 2, 3: 3, 4: -1},
      {1: -1, 2: 2, 3: 3, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: 6},
      {1: -1, 2: 4, 3: 5, 4: 6},
      {1: -1, 2: 4, 3: 5, 4: 6},
      {1: -1, 2: 4, 3: 5, 4: 6},
      {1: -1, 2: 7, 3: 8, 4: -1},
      {1: -1, 2: 9, 3: 8, 4: -1},
      {1: -1, 2: 9, 3: 8, 4: -1},
      {1: -1, 2: 9, 3: 8, 4: -1}]

def fp_scanner(input):
  t_state=0
  for i in range(0,len(input)):
    char_temp=0
    if input[i]=='-':
      char_temp=1
    elif input[i]=='0':
      char_temp=2
    elif input[i]!='0' and input[i].isdigit()==True:
      char_temp=3
    elif input[i]=='.':
      char_temp=4
    else:
      return -1
    t_state=T_FP[t_state][char_temp]
  if t_state==7 or t_state==8:
    print("<FLOAT,",input,">")
  return t_state

"""Identifier Scanner"""

T_ID=[{1: 1, 2: -1, 3: 2},
      {1: 3, 2: 4, 3: 5},
      {1: 6, 2: 7, 3: 8},
      {1: 3, 2: 4, 3: 5},
      {1: 3, 2: 4, 3: 5},
      {1: 3, 2: 4, 3: 5},
      {1: 6, 2: 7, 3: 8},
      {1: 6, 2: 7, 3: 8},
      {1: 6, 2: 7, 3: 8}]
  
#identifier
def id_scanner(input):
  t_state=0
  for i in range(0,len(input)):
    char_temp=0
    if input[i]=='_':
      char_temp=1
      print("_")
    elif input[i].isdigit()==True:
      char_temp=2
    elif input[i].isalpha()==True:
      char_temp=3
    else:
      return -1
    t_state=T_ID[t_state][char_temp]
    if t_state==-1:
      return -1
  if t_state==1 or t_state==2 or t_state==3 or t_state==4 or t_state==5 or t_state==6 or t_state==7 or t_state==8:
    print("<ID,",input,">")
    return t_state
  else:
    return t_state

"""Operator Scanner"""

T_OP=[{1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3:  8, 4: -1, 5: -1, 6:  7},
      {1: -1, 2: -1, 3: -1, 4: 10, 5: -1, 6:  9},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: 11},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: 12},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1}
      ]

def op_scanner(input):
  t_state=0
  for i in range(0,len(input)):
    char_temp=0
    if input[i]=='&':
      char_temp=1
    elif input[i]=='|':
      char_temp=2
    elif input[i]=='<':
      char_temp=3
    elif input[i]=='>':
      char_temp=4
    elif input[i]=='!':
      char_temp=5
    elif input[i]=='=':
      char_temp=6
    else:
      return -1
    t_state=T_OP[t_state][char_temp]
    if t_state==-1:
      return -1
  if t_state==1 or t_state==2 or t_state==3 or t_state==6 or t_state==7 or t_state==8 or t_state==9 or t_state==10 or t_state==11 or t_state==12:
    print("<OP,",input,">")
    return t_state
  else:
    return t_state

"""Keyword & VariableType Scanner"""

T_KW=[{1: 1, 2: 2, 3: 3, 4: 4, 5: 5},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1}]

def kw_scanner(input):
  t_state=0
  char_temp=0
  if input=="if":
    char_temp=1
  elif input=="else":
    char_temp=2
  elif input=="while":
    char_temp=3
  elif input=="for":
    char_temp=4
  elif input=="return":
    char_temp=5
  else:
    return -1
  t_state=T_KW[t_state][char_temp]
  if t_state==-1:
    return -1
  if t_state==1 or t_state==2 or t_state==3 or t_state==4 or t_state==5:
    print("<KEYWORD,",input,">")
    return t_state


T_VT=[{1: 1, 2: 2, 3: 3, 4: 4},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1},]

def vt_scanner(input):
  t_state=0
  char_temp=0
  if input=="int":
    char_temp=1
  elif input=="char":
    char_temp=2
  elif input=="bool":
    char_temp=3
  elif input=="float":
    char_temp=4
  else:
    return -1
  t_state=T_VT[t_state][char_temp]
  if t_state==-1:
    return -1
  if t_state==1 or t_state==2 or t_state==3 or t_state==4:
    print("<VARTYPE,",input,">")
    return t_state

"""Literal String & Boolean String Scanner"""

T_LS=[{1: 1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: 2, 3: 3, 4: 4},
      {1: 5, 2: 2, 3: 3, 4: 4},
      {1: 5, 2: 2, 3: 3, 4: 4},
      {1: 5, 2: 2, 3: 3, 4: 4},
      {1: -1, 2: -1, 3: -1, 4: -1}
      ]

def ls_scanner(input):
  t_state=0
  for i in range(0,len(input)):
    char_temp=0
    if input[i]=='\"':
      char_temp=1
    elif input[i].isalpha()==True:
      char_temp=2
    elif input[i].isdigit()==True:
      char_temp=3
    elif input[i]==' ':
      char_temp=4
    else:
      return -1
    t_state=T_LS[t_state][char_temp]
  if t_state==5:
    print("<LITERAL STRING,",input,">")
    return t_state
  else:
    return -1

T_BS=[{1: 1, 2: 2},
      {1: -1,2: -1},
      {1: -1,2: -1}]

def bs_scanner(input):
  t_state=0
  char_temp=0
  if input=="true":
    char_temp=1
  elif input=="false":
    char_temp=2
  else:
    return -1
  t_state=T_BS[t_state][char_temp]
  if t_state==1:
    print("<BOOLSTR,TRUE")
    return t_state
  elif t_state==2:
    print("<BOOLSTR,FALSE>")
    return t_state
  else:
    return t_state

"""Symbol Scanner"""

T_SM=[{1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      {1: -1, 2: -1, 3: -1, 4: -1, 5: -1, 6: -1},
      ]

def sm_scanner(input):
  t_state=0
  temp_char=0
  if input==';':
    temp_char=1
  elif input=='{':
    temp_char=2
  elif input=='}':
    temp_char=3
  elif input=='(':
    temp_char=4
  elif input==')':
    temp_char=5
  elif input==',':
    temp_char=6
  else:
    return -1
  t_state=T_SM[t_state][temp_char]
  if t_state==1:
    print("SEMMICOLON")
    return t_state
  elif t_state==2:
    print("LBRACE")
    return t_state
  elif t_state==3:
    print("RBRACE")
    return t_state
  elif t_state==4:
    print("LPAREN")
    return t_state
  elif t_state==5:
    print("RPAREN")
    return t_state
  elif t_state==6:
    print("COMMA")
    return t_state

"""Arithmetic Operator Scanner"""

#Arithmetic Operator Scanner
#List of dictionaries of Operator DFA
T_OS=[{1: 1, 2: 2, 3: 3, 4: 4},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1},
      {1: -1, 2: -1, 3: -1, 4: -1}
      ]

#Arithmetic Operator Scanner
def os_scanner(input):
  t_state=0
  temp_char=0
  if input=='+':
    temp_char=1
  elif input=='-':
    temp_char=2
  elif input=='*':
    temp_char=3
  elif input=='/':
    temp_char=4
  else:
    return -1
  t_state=T_OS[t_state][temp_char]
  if t_state==1:
    print("<OP,",input,">")
    return t_state
  elif t_state==2:
    print("<OP,",input,">")
    return t_state
  elif t_state==3:
    print("<OP,",input,">")
    return t_state
  elif t_state==4:
    print("<OP,",input,">")
    return t_state

"""# *Text Parsing & Scanning*"""

symbols=[';','{','}','(',')',',']
operator2=['<<','>>','==','!=','<=','>=']
operator1=['+','*','/',
           '&','|',
           '<','>']

def token_parser(input):
  list_str=input.split()
  list_str
  #parsing based on symbols
  for j in range(0, len(symbols)):
    temp_char=symbols[j]
    i=0
    while(i<len(list_str)):
      if list_str[i].find(temp_char)!=-1:
        temp=list_str[i].split(temp_char,1)
        for j in range(len(temp)-1,-1,-1):
          list_str.insert(i,temp[j])
        list_str.insert(i+1,temp_char)
        del list_str[i+3]
        i=i+1
      i=i+1
  #parsing based on Operator
  for j in range(0, len(operator2)):
    temp_char=operator2[j]
    i=0
    while(i<len(list_str)):
      if list_str[i].find(temp_char)!=-1:
        temp=list_str[i].split(temp_char,1)
        for j in range(len(temp)-1,-1,-1):
          list_str.insert(i,temp[j])
          print("insert",temp[j])
        list_str.insert(i+1,temp_char)
        print("insert temp_char",temp_char)
        del list_str[i+3]
        i=i+1
      i=i+1
  #based on Arithmetic Operator
  #Arithmetic Operator excluding '-'
  # -> parses both side (front and back)
  for j in range(0, len(operator1)):
    temp_char=operator1[j]
    i=0
    while(i<len(list_str)):
      if list_str[i].find(temp_char)!=-1:
        if list_str[i] in operator2:
        #if the token is a 2-sized operator
          i=i+1
          continue
        temp=list_str[i].split(temp_char,1)
        for j in range(len(temp)-1,-1,-1):
          list_str.insert(i,temp[j])
        list_str.insert(i+1,temp_char)
        del list_str[i+3]
        i=i+1
      i=i+1
  #hidden problem '-'
  #1. '-' Operator parses the front
  #2. '-' Operator parses the back based on the back and front token
  i=0
  while(i<len(list_str)):
    if list_str[i].find('-')!=-1:
      temp=list_str[i].split('-',1)
      list_str.insert(i,temp[0])
      if temp[-1].find('-')!=-1: #뒤에 있는 토큰에 -가 있는 경우
        list_str.insert(i+1,'-')
        list_str.insert(i+2,temp[-1])
        del list_str[i+3]
        i=i+1
      else:
        list_str.insert(i+1,'-'+temp[-1])
        del list_str[i+2]
        i=i+1    
    i=i+1
  #추가로 뒤에 붙은 것이 무엇인지에 따라 나뉘게 됨
  list_str=[v for v in list_str if v]
  return(list_str)
  #problem if there is lot's of operators/symbols superimposed -> interation

input="0.0 3 0.00 -0.3 4 3--1"
token_temp=token_parser(input)
print("token is",token_temp)
for i in range(0,len(token_temp)):
  print(i,"th token: ",token_temp[i])
  op_scanner(token_temp[i])
  ls_scanner(token_temp[i])
  bs_scanner(token_temp[i])
  sm_scanner(token_temp[i])
  os_scanner(token_temp[i])
  fp_scanner(token_temp[i])
  si_scanner(token_temp[i])
  #variable type -> keyword -> id
  vt_scanner(token_temp[i])
  kw_scanner(token_temp[i])
  id_scanner(token_temp[i])
